@page "/"
<PageTitle>Index</PageTitle>




@using System.ComponentModel.DataAnnotations
@using SyncF.Data
@using DataLibrary
@using SyncF.Models
@using Microsoft.Extensions.Configuration

@inject IDataAccess _data
@inject IConfiguration _config
@inject NavigationManager _nav
<PageTitle>Counter</PageTitle>
<h1>TT2 - 2024-B183</h1>

<h2>Sistema de monitoreo</h2>
<h1 style="color: #3353a0"> Sensor ultrasónico en los tanques</h1>
<SfDatePicker TValue="DateTime?"  Value="@DateValue">
    <DatePickerEvents TValue="DateTime?" ValueChange="@onChange"></DatePickerEvents>
</SfDatePicker>
<SfDashboardLayout CellAspectRatio="1.5" Columns="3" AllowDragging="false" AllowFloating="true">
    <DashboardLayoutPanels>

        <DashboardLayoutPanel Column="0" SizeY="0">
            <HeaderTemplate><div>Mediciones</div></HeaderTemplate>
            <ContentTemplate>
                <div>

                    <span class="income-container">
                        Cantidad actual: <br />
                        @if (fechas == null)
                        {
                            <p>Cargando...</p>
                        }
                        else
                        {
                            @ProgressValue
                        }
                    </span>

                </div>
            </ContentTemplate>
        </DashboardLayoutPanel>

        <DashboardLayoutPanel Column="3" Row="0" SizeX="2" SizeY="2">
            <HeaderTemplate><div> Litros usados</div></HeaderTemplate>
            <ContentTemplate>
                <div>
                    <br />
                    <br />
                    <SfChart>
                        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category"></ChartPrimaryXAxis>
                        <ChartSeriesCollection>
                            <ChartSeries DataSource="@fechas" XName="hora_mexico" YName="max_value" Type="ChartSeriesType.Column" Fill="#72aff8" DashArray="5,5">
                                <ChartSeriesBorder Width="2" Color="#3353a0"></ChartSeriesBorder>
                                <ChartMarker>
                                    <ChartDataLabel Visible="true" Position="Syncfusion.Blazor.Charts.LabelPosition.Middle" />
                                </ChartMarker>
                            </ChartSeries>
                        </ChartSeriesCollection>
                    </SfChart>
                </div>
            </ContentTemplate>
        </DashboardLayoutPanel>

        <DashboardLayoutPanel Column="0" Row="1">
            <HeaderTemplate><div>Capacidad actual del tanque</div></HeaderTemplate>
            <ContentTemplate>
                <div>
                    <br />
                    <SfProgressBar Type="ProgressType.Circular" Height=50% Width=50% Value=@ProgressValue Minimum="400" Maximum="5000" TrackThickness="10" ProgressThickness="9" SegmentCount="10" CornerRadius="CornerType.Round" TrackColor="#72aff8" ShowProgressValue="true" ProgressColor="#3353a0">
                        <ProgressBarAnimation Enable="true"></ProgressBarAnimation>
                    </SfProgressBar>
                </div>
            </ContentTemplate>
        </DashboardLayoutPanel>

    </DashboardLayoutPanels>
</SfDashboardLayout>
<br />
<br />
@if (fechas == null)
{
    <p>Cargando...</p>
}
else
{
    @foreach (var p in fechas)
    {
        <p>
            @p.hora_mexico @p.max_value 
        </p>
    }
}
  

<style>
    .e-panel-header {
        background-color: rgba(0, 0, 0, .1);
        text-align: center;
    }

    .e-panel-content {
        text-align: center;
        margin-top: 10px;
    }

    .income-container {
        font-size: x-large;
        color: #3353a0;
        margin-top: 14px;
        padding: 15px;
    }
</style>
<svg style="height: 0">
    <defs>
        <linearGradient id="grad1" x1="0%" y1="0%" x2="0%" y2="100%">
            <stop offset="20%" style="stop-color:orange;stop-opacity:1" />
            <stop offset="100%" style="stop-color:black;stop-opacity:1" />
        </linearGradient>
    </defs>
</svg>
@code {
    public List<SensorModel> sensor;
    public List<GraphModel> fechas;
    public double ProgressValue { get; set; }
    public DateTime? DateValue { get; set; } = DateTime.Now;
    public string DateValueFormatted { get; set; } = DateTime.Now.ToString("yyyy-MM-dd");
    //Obtener la fehca del calendario
    private async void onChange(Syncfusion.Blazor.Calendars.ChangedEventArgs<DateTime?> args)
    {
        DateValue = args.Value;
        // Convertir a formato YYYY-MM-DD
        DateValueFormatted = DateValue?.ToString("yyyy-MM-dd");
        string sql = "select fecha_mexico, hora_mexico, MIN(valor) as max_value FROM NIVEL  WHERE DATE(fecha_mexico) = DATE('" + @DateValueFormatted + "') GROUP BY hora_mexico order by hora_mexico ASC;";
        
        fechas = await _data.LoadData<GraphModel, dynamic>(sql, new { }, _config.GetConnectionString("Mau"));
        sql = "SELECT * FROM NIVEL WHERE DATE(fecha_mexico) = DATE('" + @DateValueFormatted + "') ORDER BY fecha_mexico DESC LIMIT 1;";
        sensor = await _data.LoadData<SensorModel, dynamic>(sql, new { }, _config.GetConnectionString("Mau"));
        if (sensor != null)
        {
            ProgressValue = sensor[0].valor;
        }
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        string sql = "SELECT * FROM NIVEL WHERE DATE(fecha_mexico) = DATE('" + @DateValueFormatted + "') ORDER BY fecha_mexico DESC LIMIT 1;";
        sensor = await _data.LoadData<SensorModel, dynamic>(sql, new { }, _config.GetConnectionString("Mau"));
        if (sensor != null)
        {
            ProgressValue = sensor[0].valor;
        }
        sql = "SELECT * FROM Min_Niv WHERE DATE(fecha_mexico) = DATE('" + @DateValueFormatted + "') order by fecha_mexico asc;";
        fechas = await _data.LoadData<GraphModel, dynamic>(sql, new { }, _config.GetConnectionString("Mau"));
        // for (int i = 1; i < valores.Count; i++)
        // {
        //     var current = valores[i];
        //     var previous = valores[i - 1];
        //     differences.Add(new GraphModel
        //         {
        //             hora_mexico = current.hora_mexico,
        //             max_value = current.max_value - previous.max_value
        //         });
        // }

    }

}
