@page "/lavado"
<PageTitle>Lavado</PageTitle>

@using System.ComponentModel.DataAnnotations
@using SyncF.Data
@using DataLibrary
@using SyncF.Models
@using Microsoft.Extensions.Configuration

@inject WeatherForecastService ForecastService
@inject IDataAccess _data
@inject IConfiguration _config
@inject NavigationManager _nav
<PageTitle>Llenado</PageTitle>

<h1 style="color: #3353a0"> Sensor de flujo en la llave de lavado</h1>
<SfDatePicker TValue="DateTime?" Format="yyyy-MM-dd" Value="@DateValue">
    <DatePickerEvents TValue="DateTime?" ValueChange="@onChange"></DatePickerEvents>
</SfDatePicker>

<SfDashboardLayout CellAspectRatio="1.5" Columns="3" AllowDragging="false" AllowFloating="true">
    <DashboardLayoutPanels>

        <DashboardLayoutPanel Column="0" SizeY="0">
            <HeaderTemplate><div>Mediciones</div></HeaderTemplate>
            <ContentTemplate>
                <div>
                    <span class="income-container">
                        Cantidad actual: <br />
                        @if (sensor == null)
                        {
                            <p>Cargando...</p>
                        }
                        else
                        {
                            @ProgressValue

                        }
                    </span>
                </div>
            </ContentTemplate>
        </DashboardLayoutPanel>

        <DashboardLayoutPanel Column="3" Row="0" SizeX="2" SizeY="2">
            <HeaderTemplate><div> Litros usados</div></HeaderTemplate>
            <ContentTemplate>
                <div>
                    <br />
                    <br />
                    <SfChart>
                        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category"></ChartPrimaryXAxis>
                        <ChartSeriesCollection>
                            <ChartSeries DataSource="@valores" XName="hora_mexico" YName="max_value" Type="ChartSeriesType.Spline" Fill="#72aff8" SplineType="SplineType.Cardinal" Width="3">
                                <ChartMarker Visible="true" Height="15" Width="15" Fill="#3353a0" Shape="ChartShape.Circle">
                                    <ChartDataLabel Visible="true" />
                                </ChartMarker>
                            </ChartSeries>
                        </ChartSeriesCollection>
                    </SfChart>
                </div>
            </ContentTemplate>
        </DashboardLayoutPanel>

        <DashboardLayoutPanel Column="0" Row="1">
            <HeaderTemplate><div>Capacidad actual de la tuberia</div></HeaderTemplate>
            <ContentTemplate>
                <div>
                    <br />
                    <SfProgressBar Type="ProgressType.Circular" Height=50% Width=50% Value=@ProgressValue Minimum="0" Maximum="100" TrackThickness="10" ProgressThickness="9" SegmentCount="10" CornerRadius="CornerType.Round" TrackColor="#72aff8" ShowProgressValue="true" ProgressColor="#3353a0">
                        <ProgressBarAnimation Enable="true"></ProgressBarAnimation>
                    </SfProgressBar>
                </div>
            </ContentTemplate>
        </DashboardLayoutPanel>

    </DashboardLayoutPanels>
</SfDashboardLayout>

@* <h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
} *@
<style>
    .e-panel-header {
        background-color: rgba(0, 0, 0, .1);
        text-align: center;
    }

    .e-panel-content {
        text-align: center;
        margin-top: 10px;
    }
    .income-container
    {
        font-size: x-large;
        color: #3353a0;
        margin-top: 14px;
        padding: 15px;
    }
</style>
@code {
    public List<SensorModel> sensor;
    public List<GraphModel> valores;
    public double ProgressValue { get; set; }


    protected override async Task OnInitializedAsync()
    {
        string sql = "SELECT * FROM Min_Rat ORDER BY fecha_mexico DESC LIMIT 1;";
        sensor = await _data.LoadData<SensorModel, dynamic>(sql, new { }, _config.GetConnectionString("default"));
        sql = "SELECT * FROM Min_Rat ORDER BY hora_mexico ASC; ";
        valores = await _data.LoadData<GraphModel, dynamic>(sql, new { }, _config.GetConnectionString("default"));
        if (sensor != null)
        {
            ProgressValue = sensor[0].valor;
        }

        // for (int i = 1; i < valores.Count; i++)
        // {
        //     var current = valores[i];
        //     var previous = valores[i - 1];
        //     differences.Add(new GraphModel
        //         {
        //             hora_mexico = current.hora_mexico,
        //             max_value = current.max_value - previous.max_value
        //         });
        // }

    }
    public DateTime? DateValue { get; set; } = DateTime.Now;
    private void onChange(Syncfusion.Blazor.Calendars.ChangedEventArgs<DateTime?> args)
    {
        DateValue = args.Value;
        StateHasChanged();
    }
}
